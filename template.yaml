AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Whenever a bucket is created, we want to detect whether it contains log files
  from CloudFront or AWS Elastic Load Balancing Services. If so, we replicate the
  contents of such buckets to the Log Archive account.

Parameters:
  CrossAccountRole:
    Type: String
    Description:
      The role to assume in other organisation accounts. Must be SCP-exempt and give
      full admin rights. Use AWSControlTowerExecution under CT, OrganizationAccountAccessRole
      under AWS Organizations. Make sure this role exists also in the Organization account
      and can be assumed only from there. Define it manually if necessary.
    AllowedValues: ['AWSControlTowerExecution', 'OrganizationAccountAccessRole']
    Default: 'AWSControlTowerExecution'

  CustomEventBusName:
    Type: String
    Description: The custom event bus to listen to for the events
    Default: security-hub-automation

  LogArchiveAccountId:
    Type: String
    Description: The ID of the Log Archive account
    Default: '938898731677'
  
  SourceAccountRoleName:
    Type: String
    Description: The name of the role in the source accounts allowed to perform
      the replication operations.
    Default: 's3-log-replication-source-account-role'

  CloudFrontLogsBucketName:
    Type: String
    Description: The name of the CloudFront bucket in the Log Archive
    Default: 'cloudfront-logs-938898731677-eu-north-1'

  LoadBalancerLogsBucketName:
    Type: String
    Description: The name of the CloudFront bucket in the Log Archive
    Default: 'load-balancer-logs-938898731677-eu-north-1'

Globals:
  Function:
    CodeUri: functions
    Timeout: 30
    Runtime: python3.9

Resources:
  #-------------------------------------------------------------------------------
  #
  # Detecting bucket lifecycle events
  #
  #-------------------------------------------------------------------------------

  LifecycleEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lifecycle_event/app.lambda_handler
      Events:
        CreatedDeleted:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref CustomEventBusName
            Pattern:
              source:
                - aws.s3
              detail-type:
                - AWS API Call via CloudTrail
              detail:
                eventSource: 
                  - s3.amazonaws.com
                eventName: 
                  - CreateBucket
                  - DeleteBucket
      Policies:
        - Statement:
            - Sid: AssumeTheRole
              Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: !Sub 'arn:aws:iam::*:role/${CrossAccountRole}'
            - Sid: StartStepFunction
              Effect: Allow
              Action:
                - states:StartExecution
              Resource:
                - !Ref MonitorBucketForLogs
      Environment:
        Variables:
          LOG_ARCHIVE_ACCOUNT_ID: !Ref LogArchiveAccountId
          STATE_MACHINE_ARN: !Ref MonitorBucketForLogs


  #-------------------------------------------------------------------------------
  #
  # The state machine monitoring each new S3 bucket using an individual Step
  # Functions execution. Terminates when a decision has been made, but after a
  # maximum of 2 days, given the current settings: there is an initial 10-minute
  # wait, then the bucket is examined every 30 minutes for a total of 100 times.
  # 
  # Whenever the system detects that the new bucket contains files with names 
  # conforming to the log name formats for CloudFront or Elastic Load Balancing, 
  # the bucket will be set up to replicate new contents to the centralised 
  # aggregation buckets in the Log Archive account. The bucket may contain up to 
  # 5 non-log files; a decision will be made only when enough files have been 
  # detected. The decision is made on the 10 last files to be put in the bucket.
  #
  #-------------------------------------------------------------------------------

  MonitorBucketForLogs:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/monitor_bucket_for_logs.asl.yaml
      DefinitionSubstitutions:
        GetLatestFilesFunctionArn: !GetAtt GetLatestFilesFunction.Arn
        AnalyseAndDecrementFunctionArn: !GetAtt AnalyseAndDecrementFunction.Arn
        ActivateReplicationFunctionArn: !GetAtt ActivateReplicationFunction.Arn
        CreateIncidentFunctionArn: !GetAtt CreateIncidentFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref GetLatestFilesFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref AnalyseAndDecrementFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ActivateReplicationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateIncidentFunction


  GetLatestFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_latest_files/app.lambda_handler
      Policies:
        - Statement:
            - Sid: AssumeTheRole
              Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: !Sub 'arn:aws:iam::*:role/${CrossAccountRole}'
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:*    # Tighten this policy
                - s3:ListBucket
              Resource: '*'
      Environment:
        Variables:
          CROSS_ACCOUNT_ROLE: !Ref CrossAccountRole

  AnalyseAndDecrementFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: analyse_and_decrement/app.lambda_handler

  ActivateReplicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: activate_replication/app.lambda_handler
      Policies:
        - Statement:
            - Sid: AssumeTheRole
              Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: !Sub 'arn:aws:iam::*:role/${CrossAccountRole}'
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:PutBucketEncryption
                - s3:PutBucketVersioning
                - s3:PutBucketReplication
                - s3:PutLifecycleConfiguration
              Resource: '*'
      Environment:
        Variables:
          CROSS_ACCOUNT_ROLE: !Ref CrossAccountRole
          REPLICATION_ROLE_NAME: !Ref SourceAccountRoleName
          LOG_ARCHIVE_ACCOUNT_iD: !Ref LogArchiveAccountId
          CLOUDFRONT_LOGS_BUCKET_NAME: !Ref CloudFrontLogsBucketName
          LOAD_BALANCER_LOGS_BUCKET_NAME: !Ref LoadBalancerLogsBucketName

  CreateIncidentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create_incident/app.lambda_handler
      Policies:
        - Statement:
            - Sid: AssumeTheRole
              Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: !Sub 'arn:aws:iam::*:role/${CrossAccountRole}'
            - Sid: SecHubPermissions
              Effect: Allow
              Action:
                - securityhub:BatchImportFindings
              Resource: '*'
      Environment:
        Variables:
          CROSS_ACCOUNT_ROLE: !Ref CrossAccountRole


  #-------------------------------------------------------------------------------
  #
  # Monitoring. Incidents automatically created.
  #
  #-------------------------------------------------------------------------------

  AlarmMonitorBucketForLogs:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: INFRA-MonitorBucketForLogs-Failure-MEDIUM
      AlarmDescription: The MonitorBucketForLogs state machine failed.
      ActionsEnabled: true
      OKActions: []
      AlarmActions: []
      InsufficientDataActions: []
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Statistic: Sum
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref MonitorBucketForLogs
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  AlarmLifecycleEventFunction:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: INFRA-LifecycleEventFunction-HIGH
      ActionsEnabled: true
      OKActions: []
      AlarmActions: []
      InsufficientDataActions: []
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Dimensions:
        - Name: FunctionName
          Value: !Ref LifecycleEventFunction
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
